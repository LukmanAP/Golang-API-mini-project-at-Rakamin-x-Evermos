{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "API documentation for Project Evermos",
        "title": "Evermos API Documentation",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticate user dengan nomor telepon dan kata sandi",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.AuthLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/http.AuthLoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register akun pengguna baru",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.AuthRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/http.AuthRegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/category": {
            "get": {
                "description": "Get list of all product categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "List categories",
                "responses": {
                    "200": {
                        "description": "List of categories",
                        "schema": {
                            "$ref": "#/definitions/http.CategoryListResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create new product category (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Create category",
                "parameters": [
                    {
                        "description": "Category data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CategoryCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category created",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseID"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin only",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/category/{id}": {
            "get": {
                "description": "Get specific category details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Get category by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category details",
                        "schema": {
                            "$ref": "#/definitions/http.CategoryDetailResponse"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update category by ID (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Update category",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Category update data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CategoryUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category updated",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseString"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin only",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete category by ID (Admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Delete category",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category deleted",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseString"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin only",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Health check endpoint to verify server status",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/product": {
            "get": {
                "description": "Get list of products dengan filtering dan pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "List products",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "example": 10,
                        "description": "Results per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "Kemeja",
                        "description": "Filter by product name",
                        "name": "nama_produk",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 2,
                        "description": "Filter by category ID",
                        "name": "category_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 5,
                        "description": "Filter by store ID",
                        "name": "toko_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 50000,
                        "description": "Minimum price filter",
                        "name": "min_harga",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 150000,
                        "description": "Maximum price filter",
                        "name": "max_harga",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of products",
                        "schema": {
                            "$ref": "#/definitions/http.ProductListResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create new product dengan upload foto",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Create product",
                "parameters": [
                    {
                        "type": "string",
                        "example": "Kemeja Pria Lengan Panjang",
                        "description": "Product name",
                        "name": "nama_produk",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 2,
                        "description": "Category ID",
                        "name": "category_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 90000,
                        "description": "Reseller price",
                        "name": "harga_reseller",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 120000,
                        "description": "Consumer price",
                        "name": "harga_konsumen",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 50,
                        "description": "Stock quantity",
                        "name": "stok",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "Bahan katun, nyaman dipakai",
                        "description": "Product description",
                        "name": "deskripsi",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Product photos (multiple files supported)",
                        "name": "photos",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product created",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseID"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/product/{id}": {
            "get": {
                "description": "Get specific product details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get product by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 10,
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product details",
                        "schema": {
                            "$ref": "#/definitions/http.ProductDetailResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update product information dengan optional upload foto",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Update product",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 10,
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "Kemeja Pria Premium",
                        "description": "Product name",
                        "name": "nama_produk",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "example": 3,
                        "description": "Category ID",
                        "name": "category_id",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "example": 95000,
                        "description": "Reseller price",
                        "name": "harga_reseller",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "example": 125000,
                        "description": "Consumer price",
                        "name": "harga_konsumen",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "example": 60,
                        "description": "Stock quantity",
                        "name": "stok",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "example": "Bahan katun premium",
                        "description": "Product description",
                        "name": "deskripsi",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Product photos (multiple files supported)",
                        "name": "photos",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseString"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete product by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Delete product",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 10,
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseString"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/provcity/detailcity/{city_id}": {
            "get": {
                "description": "Get detailed information about a city",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Address"
                ],
                "summary": "Get city detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "City ID",
                        "name": "city_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "City details",
                        "schema": {
                            "$ref": "#/definitions/http.AddressCityDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad gateway",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/provcity/detailprovince/{prov_id}": {
            "get": {
                "description": "Get detailed information about a province",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Address"
                ],
                "summary": "Get province detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Province ID",
                        "name": "prov_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Province details",
                        "schema": {
                            "$ref": "#/definitions/http.AddressProvinceDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad gateway",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/provcity/listcities/{prov_id}": {
            "get": {
                "description": "Get list of cities in a specific province",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Address"
                ],
                "summary": "List cities by province",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Province ID",
                        "name": "prov_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of cities",
                        "schema": {
                            "$ref": "#/definitions/http.AddressCitiesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "Bad gateway",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/provcity/listprovincies": {
            "get": {
                "description": "Get list of Indonesian provinces",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Address"
                ],
                "summary": "List provinces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search keyword",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "description": "Results limit (0-100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number (\u003e=1)",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of provinces",
                        "schema": {
                            "$ref": "#/definitions/http.AddressProvincesResponse"
                        }
                    },
                    "502": {
                        "description": "Bad gateway",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway timeout",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/toko": {
            "get": {
                "description": "Get list of all stores dengan pagination dan pencarian",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Toko"
                ],
                "summary": "List stores",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "example": 10,
                        "description": "Results per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "Budi",
                        "description": "Filter by store name",
                        "name": "nama",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of stores",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseString"
                        }
                    }
                }
            }
        },
        "/toko/my": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user's store information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Toko"
                ],
                "summary": "Get my store",
                "responses": {
                    "200": {
                        "description": "Store information",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseString"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/toko/{id_toko}": {
            "get": {
                "description": "Get public store information by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Toko"
                ],
                "summary": "Get store by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 5,
                        "description": "Store ID",
                        "name": "id_toko",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Store information",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseString"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update store information dengan optional photo upload",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Toko"
                ],
                "summary": "Update store",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 5,
                        "description": "Store ID",
                        "name": "id_toko",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "Toko Budi",
                        "description": "Store name",
                        "name": "nama_toko",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Store photo (jpg, jpeg, png)",
                        "name": "photo",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update successful",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseString"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trx": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of user's transactions with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "List transactions",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "example": 10,
                        "description": "Results per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of transactions",
                        "schema": {
                            "$ref": "#/definitions/http.TransactionListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create new transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Create transaction",
                "parameters": [
                    {
                        "description": "Transaction data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.TransactionCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction created",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseID"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trx/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get specific transaction details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Get transaction by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction details",
                        "schema": {
                            "$ref": "#/definitions/http.TransactionDetailResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Transaction not found",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user's profile information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "$ref": "#/definitions/http.UserProfileResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update current user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Profile update data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.AuthRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update successful",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseString"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/alamat": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of user's delivery addresses",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "List user addresses",
                "parameters": [
                    {
                        "type": "string",
                        "example": "Home",
                        "description": "Filter by address title",
                        "name": "judul_alamat",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of addresses",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseString"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create new delivery address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create address",
                "parameters": [
                    {
                        "description": "Address data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address created",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseID"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/alamat/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get specific address by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get address by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Address ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address details",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseString"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update delivery address by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update address",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Address ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Address update data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address updated",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseString"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete delivery address by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete address",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Address ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address deleted",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponseString"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "http.APIResponseID": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "integer",
                    "example": 10
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to POST data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.APIResponseString": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": ""
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to PUT data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.AddressCitiesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.CityRef"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to get data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.AddressCityDetailResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/http.CityRef"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to get data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.AddressProvinceDetailResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/http.ProvinceRef"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to get data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.AddressProvincesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.ProvinceRef"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to get data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.AuthLoginData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "id_kota": {
                    "$ref": "#/definitions/http.CityRef"
                },
                "id_provinsi": {
                    "$ref": "#/definitions/http.ProvinceRef"
                },
                "nama": {
                    "type": "string",
                    "example": "John Doe"
                },
                "no_telp": {
                    "type": "string",
                    "example": "08123456789"
                },
                "pekerjaan": {
                    "type": "string",
                    "example": "Reseller"
                },
                "tanggal_Lahir": {
                    "type": "string",
                    "example": "01/01/1990"
                },
                "tentang": {
                    "type": "string",
                    "example": "Saya reseller Evermos"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "http.AuthLoginRequest": {
            "type": "object",
            "properties": {
                "kata_sandi": {
                    "type": "string",
                    "example": "password123"
                },
                "no_telp": {
                    "type": "string",
                    "example": "08123456789"
                }
            }
        },
        "http.AuthLoginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/http.AuthLoginData"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to POST data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.AuthRegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "id_kota": {
                    "type": "string",
                    "example": "1101"
                },
                "id_provinsi": {
                    "type": "string",
                    "example": "11"
                },
                "kata_sandi": {
                    "type": "string",
                    "example": "password123"
                },
                "nama": {
                    "type": "string",
                    "example": "John Doe"
                },
                "no_telp": {
                    "type": "string",
                    "example": "08123456789"
                },
                "pekerjaan": {
                    "type": "string",
                    "example": "Reseller"
                },
                "tanggal_Lahir": {
                    "type": "string",
                    "example": "01/01/1990"
                }
            }
        },
        "http.AuthRegisterResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "Register Succeed"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to POST data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.CategoryCreateRequest": {
            "type": "object",
            "properties": {
                "nama_category": {
                    "type": "string",
                    "example": "Fashion"
                }
            }
        },
        "http.CategoryDetailResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/http.CategoryItem"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to GET data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.CategoryItem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "nama_category": {
                    "type": "string",
                    "example": "Fashion"
                }
            }
        },
        "http.CategoryListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.CategoryItem"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to GET data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.CategoryUpdateRequest": {
            "type": "object",
            "properties": {
                "nama_category": {
                    "type": "string",
                    "example": "Electronics - Updated"
                }
            }
        },
        "http.CityRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "1101"
                },
                "name": {
                    "type": "string",
                    "example": "Kota Banda Aceh"
                },
                "province_id": {
                    "type": "string",
                    "example": "11"
                }
            }
        },
        "http.ErrorResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Invalid JSON"
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Failed to POST data"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "http.Product": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/http.ProductCategory"
                },
                "deskripsi": {
                    "type": "string",
                    "example": "Bahan katun, nyaman dipakai"
                },
                "harga_konsumen": {
                    "type": "integer",
                    "example": 120000
                },
                "harga_reseller": {
                    "type": "integer",
                    "example": 90000
                },
                "id": {
                    "type": "integer",
                    "example": 10
                },
                "nama_produk": {
                    "type": "string",
                    "example": "Kemeja Pria Lengan Panjang"
                },
                "photos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.ProductPhoto"
                    }
                },
                "slug": {
                    "type": "string",
                    "example": "kemeja-pria-lengan-panjang"
                },
                "stok": {
                    "type": "integer",
                    "example": 50
                },
                "toko": {
                    "$ref": "#/definitions/http.ProductStore"
                }
            }
        },
        "http.ProductCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 2
                },
                "nama_category": {
                    "type": "string",
                    "example": "Fashion"
                }
            }
        },
        "http.ProductDetailResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/http.Product"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to GET data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.ProductListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.Product"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to GET data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.ProductPhoto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "product_id": {
                    "type": "integer",
                    "example": 10
                },
                "url": {
                    "type": "string",
                    "example": "https://files.local/uploads/products/1758869029454234400-IMG_2867_11zon.jpg"
                }
            }
        },
        "http.ProductStore": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 5
                },
                "nama_toko": {
                    "type": "string",
                    "example": "Toko Budi"
                },
                "url_foto": {
                    "type": "string",
                    "example": "https://files.local/uploads/stores/toko-1758868233503052000.jpg"
                }
            }
        },
        "http.ProvinceRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "11"
                },
                "name": {
                    "type": "string",
                    "example": "Aceh"
                }
            }
        },
        "http.TransactionCreateItem": {
            "type": "object",
            "properties": {
                "kuantitas": {
                    "type": "integer",
                    "example": 2
                },
                "product_id": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "http.TransactionCreateRequest": {
            "type": "object",
            "properties": {
                "alamat_kirim": {
                    "type": "integer",
                    "example": 3
                },
                "detail_trx": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.TransactionCreateItem"
                    }
                },
                "method_bayar": {
                    "type": "string",
                    "example": "COD"
                }
            }
        },
        "http.TransactionDetailResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/http.TrxItem"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to GET data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.TransactionListData": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.TrxItem"
                    }
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "page": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "http.TransactionListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/http.TransactionListData"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to GET data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.TrxAlamatKirim": {
            "type": "object",
            "properties": {
                "detail_alamat": {
                    "type": "string",
                    "example": "Jl. Sudirman No. 1, Bandung"
                },
                "id": {
                    "type": "integer",
                    "example": 3
                },
                "judul_alamat": {
                    "type": "string",
                    "example": "Rumah"
                },
                "nama_penerima": {
                    "type": "string",
                    "example": "John Doe"
                },
                "no_telp": {
                    "type": "string",
                    "example": "08123456789"
                }
            }
        },
        "http.TrxCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 2
                },
                "nama_category": {
                    "type": "string",
                    "example": "Fashion"
                }
            }
        },
        "http.TrxDetailItem": {
            "type": "object",
            "properties": {
                "harga_total": {
                    "type": "integer",
                    "example": 240000
                },
                "kuantitas": {
                    "type": "integer",
                    "example": 2
                },
                "product": {
                    "$ref": "#/definitions/http.TrxProduct"
                },
                "toko": {
                    "$ref": "#/definitions/http.TrxToko"
                }
            }
        },
        "http.TrxItem": {
            "type": "object",
            "properties": {
                "alamat_kirim": {
                    "$ref": "#/definitions/http.TrxAlamatKirim"
                },
                "detail_trx": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.TrxDetailItem"
                    }
                },
                "harga_total": {
                    "type": "integer",
                    "example": 240000
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "kode_invoice": {
                    "type": "string",
                    "example": "INV-1700000000"
                },
                "method_bayar": {
                    "type": "string",
                    "example": "COD"
                }
            }
        },
        "http.TrxPhoto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "product_id": {
                    "type": "integer",
                    "example": 10
                },
                "url": {
                    "type": "string",
                    "example": "https://files.local/uploads/products/p1.jpg"
                }
            }
        },
        "http.TrxProduct": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/http.TrxCategory"
                },
                "deskripsi": {
                    "type": "string",
                    "example": "Bahan katun, nyaman dipakai"
                },
                "harga_konsumen": {
                    "type": "integer",
                    "example": 120000
                },
                "harga_reseler": {
                    "type": "integer",
                    "example": 90000
                },
                "id": {
                    "type": "integer",
                    "example": 10
                },
                "nama_produk": {
                    "type": "string",
                    "example": "Kemeja Pria Lengan Panjang"
                },
                "photos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.TrxPhoto"
                    }
                },
                "slug": {
                    "type": "string",
                    "example": "kemeja-pria-lengan-panjang"
                },
                "toko": {
                    "$ref": "#/definitions/http.TrxToko"
                }
            }
        },
        "http.TrxToko": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 5
                },
                "nama_toko": {
                    "type": "string",
                    "example": "Toko Budi"
                },
                "url_foto": {
                    "type": "string",
                    "example": "https://files.local/uploads/stores/toko-1.jpg"
                }
            }
        },
        "http.UserProfileData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "id_kota": {
                    "$ref": "#/definitions/http.CityRef"
                },
                "id_provinsi": {
                    "$ref": "#/definitions/http.ProvinceRef"
                },
                "nama": {
                    "type": "string",
                    "example": "John Doe"
                },
                "no_telp": {
                    "type": "string",
                    "example": "08123456789"
                },
                "pekerjaan": {
                    "type": "string",
                    "example": "Reseller"
                },
                "tanggal_Lahir": {
                    "type": "string",
                    "example": "01/01/1990"
                }
            }
        },
        "http.UserProfileResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/http.UserProfileData"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Succeed to GET data"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}